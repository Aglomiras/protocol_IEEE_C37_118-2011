package org.mpei.C37_118_2011_ALL_FRAME.dataPacketConfiguration;

import lombok.Getter;
import lombok.Setter;

import java.util.ArrayList;

@Setter
@Getter
public class dataConfiguration {
    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Служебная информация---------------------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private short pmuDcIdNum;                                                                          //Размер: 2 байта

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Определение формата передаваемого сообщения. Заключает информацию о типах каналов в сообщении--------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private String dataFormat;                                                                         //Размер: 2 байта

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Количество фазоров-----------------------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private int numPhasor;                                                                             //Размер: 2 байта

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Количество аналоговых каналов------------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private int numAnalog;                                                                             //Размер: 2 байта

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Количество цифровых каналов--------------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private int numDigital;                                                                            //Размер: 2 байта

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Массив фазоров---------------------------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private ArrayList<dataPhasor> phasors = new ArrayList<>() {
    };                                                                                         //Размер: 3 шт по 16 байт

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Массив аналоговых каналов----------------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private ArrayList<dataAnalog> analogs = new ArrayList<>() {
    };

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Массив цифровых каналов------------------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private ArrayList<dataDigital> digital = new ArrayList<>() {
    };                                                                                         //Размер 16 шт по 16 байт

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Массив конвертеров фазоров---------------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private ArrayList<dataPhasorConvert> phasorConverts = new ArrayList<>() {
    };                                                                                                 //Размер: 12 байт

    /**
     * Массив конфигураций аналоговых каналов
     */
    private ArrayList<dataAnalogConfig> analogsConfig = new ArrayList<>() {
    };

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Маска цифрового статуса------------------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private String masks;

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Счетчик изменений конфигураций-----------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private short configChangeCount;

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Скорость изменения частоты---------------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private short rateOfTransmission;

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Конструктор:-----------------------------------------------------------------------------------------------------
     * - Задает начальные значения;-------------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public dataConfiguration() {
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод для представления информации в человекочитаемом виде-------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    @Override
    public String toString() {
        return "Station PMU {" + "\n" +
                "\t\t\t\tPmuDcIdNum: " + pmuDcIdNum + "\n" +
                "\t\t\t\tDataFormat: " + dataFormat + "\n" +
                "\t\t\t\tNumPhasor: " + numPhasor + "\n" +
                "\t\t\t\tNumAnalog: " + numAnalog + "\n" +
                "\t\t\t\tNumDigital: " + numDigital + "\n" +
                "\t\t\t\tPhasors: \n" + toStringPhasors() + "\n" +
                "\t\t\t\tAnalogs: \n" + toStringAnalogs() + "\n" +
                "\t\t\t\tDigital: \n" + toStringDigitals() + "\n" +
//                "\t\t\t\tPhasorConverts: \n" + toStringPhasorConverts() + "\n" +
//                "\t\t\t\tAnalogsConfig: \n" + toStringAnalogConfig() + "\n" +
                "\t\t\t\tMasks: " + masks + "\n" +
                "\t\t\t\tConfigChangeCount: " + configChangeCount + "\n" +
                "\t\t\t\tRateOfTransmission: " + rateOfTransmission + "\n" +
                "\t\t\t}";
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Вспомогательный метод для представления информации в человекочитаемом виде---------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public String toStringPhasors() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < phasors.size(); i++) {
            sb.append("\t\t\t\t\t")
                    .append(i + 1)
                    .append(" ")
                    .append(phasors.get(i).toString())
                    .append("\n");
        }
        return sb.toString();
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод для корректного отображения вложенной структуры------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public String toStringAnalogs() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < analogs.size(); i++) {
            sb.append("\t\t\t\t\t")
                    .append(i + 1)
                    .append(" ")
                    .append(analogs.get(i).toString())
                    .append("\n");
        }
        return sb.toString();
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод для корректного отображения вложенной структуры------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public String toStringDigitals() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < digital.size(); i++) {
            sb.append("\t\t\t\t\t")
                    .append(i + 1)
                    .append(" ")
                    .append(digital.get(i).toString())
                    .append("\n");
        }
        return sb.toString();
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод для корректного отображения вложенной структуры------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public String toStringPhasorConverts() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < phasorConverts.size(); i++) {
            sb.append("\t\t\t\t\t")
                    .append(i + 1)
                    .append(" ")
                    .append(phasorConverts.get(i).toString())
                    .append("\n");
        }
        return sb.toString();
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод для корректного отображения вложенной структуры------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public String toStringAnalogConfig() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < analogsConfig.size(); i++) {
            sb.append("\t\t\t\t\t")
                    .append(i + 1)
                    .append(" ")
                    .append(analogsConfig.get(i).toString())
                    .append("\n");
        }
        return sb.toString();
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Автоматическое заполнение всех необходимых массивов--------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public void allAddMeasur() {
        addPhasor();
        addAnalog();
        addDigital();
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по наполнению массива структурами-фазорами-----------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public void addPhasor() {
        for (int i = 0; i < this.numPhasor; i++) {
            this.phasors.add(new dataPhasor());
            this.phasorConverts.add(new dataPhasorConvert());
        }
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по заполнению массивов структурами-аналоговыми сигналами, и аналоговыми конфигурациями---------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public void addAnalog() {
        for (int i = 0; i < this.numAnalog; i++) {
            this.analogs.add(new dataAnalog());
            this.analogsConfig.add(new dataAnalogConfig());
        }
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по заполнению массива структурами цифровых сигналов--------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public void addDigital() {
        for (int i = 0; i < this.numDigital; i++) {
            this.digital.add(new dataDigital());
        }
    }

    public void createObject() {
        if (Integer.parseInt(this.dataFormat.split("")[15 + 1]) == 1) {
            System.out.println("Есть ");
        }

        if (Integer.parseInt(this.dataFormat.split("")[14 + 1]) == 1) {
            System.out.println("Есть ");
        }

        if (Integer.parseInt(this.dataFormat.split("")[13 + 1]) == 1) {
            System.out.println("Есть ");
        }

        if (Integer.parseInt(this.dataFormat.split("")[12 + 1]) == 1) {
            System.out.println("Есть ");
        }

    }
}
