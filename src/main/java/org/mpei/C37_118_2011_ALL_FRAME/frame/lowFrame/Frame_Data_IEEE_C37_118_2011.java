package org.mpei.C37_118_2011_ALL_FRAME.frame.lowFrame;

import lombok.Getter;
import lombok.Setter;
import org.mpei.C37_118_2011_ALL_FRAME.dataPacketData.dataAnalogChanel;
import org.mpei.C37_118_2011_ALL_FRAME.dataPacketData.dataMeasurement;

import java.util.ArrayList;

@Setter
@Getter
public class Frame_Data_IEEE_C37_118_2011 {
    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Flag - флаг------------------------------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private String flag;                                                                               //Размер: 2 байта

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Массив измерений, передаваемых от PMU к PDC----------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private ArrayList<dataMeasurement> measurements = new ArrayList<>() {
    };                                                                                       //Размер: варьируемый байта

    /**---------------------------------------------------------------------------------------------------------------*/
    /**
     * Frequency deviation - разность частот между измерениями
     */
    private short frequencyDeviation;                                                                  //Размер: 2 байта

    /**---------------------------------------------------------------------------------------------------------------*/
    /**
     * Rate - скорость изменения частоты
     */
    private short rate;                                                                                //Размер: 2 байта

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Analog - аналоговые измерения------------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private ArrayList<dataAnalogChanel> analogs = new ArrayList<>() {
    };                                                                      //Размер: 4 байта (каждый аналоговый сигнал)

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Digital - статус измерений---------------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private String digital;                                                                            //Размер: 2 байта

    private int numPhasor;

    private int numAnalog;

    private int numDigital;

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Конструктор:-----------------------------------------------------------------------------------------------------
     * - Заполнение массива измерений, экземплярами класса измерений;---------------------------------------------------
     * - Заполнение аналоговых измерений, экземплярами класса аналоговых каналов;---------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public Frame_Data_IEEE_C37_118_2011() {
        this.digital = "0";
        for (int i = 0; i < 4; i++) { //14
            this.measurements.add(new dataMeasurement());
        }
//        for (int i = 0; i < 8; i++) {
//            this.analogs.add(new dataAnalogChanel());
//        }
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод для представления информации в человекочитаемом виде-------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    @Override
    public String toString() {
        return "PMU [IEEE C37.118-2011] { " + '\n' +
                "\t\t\tFlag: " + flag + '\n' +
                "\t\t\tPhasors: \n" + toStringMeasurement() +
                "\t\t\tFrequency deviation: " + frequencyDeviation + " Hz" + '\n' +
                "\t\t\tRate: " + rate + " Hz/s" + '\n' +
                "\t\t\tAnalog: \n" + toStringAnalog() +
                "\t\t\tDigital: 0x" + Integer.toHexString(Integer.parseInt(digital)) + '\n' +
                "\t\t" + '}' + '\n';
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Дополнительный метод, для корректного вывода вложенной структуры (Measurement)-----------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public String toStringMeasurement() {
        StringBuilder measurements = new StringBuilder();
        for (int i = 0; i < this.measurements.size(); i++) {
            measurements.append("\t\t\t\t").append(i + 1).append(" phasor: ").
                    append(this.measurements.get(i).toString()).append('\n');
        }
        return measurements.toString();
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Дополнительный метод, для корректного вывода вложенной структуры (Analogs)---------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public String toStringAnalog() {
        StringBuilder analogs = new StringBuilder();
        for (int i = 0; i < this.analogs.size(); i++) {
            analogs.append("\t\t\t\t").append(i + 1).append(" analog chanel: ").
                    append(this.analogs.get(i).toString()).append('\n');
        }
        return analogs.toString();
    }

}
