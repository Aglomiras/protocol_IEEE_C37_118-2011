package org.mpei.C37_118_2011_ALL_FRAME.frame.grandFrame;

import lombok.Getter;
import lombok.Setter;
import org.mpei.C37_118_2011_1PMU.dataPacket.DtoPacketBleach;
import org.mpei.C37_118_2011_ALL_FRAME.frame.lowFrame.Frame_Command_IEEE_C37_118_2011;
import org.mpei.C37_118_2011_ALL_FRAME.frame.lowFrame.Frame_Configuration_IEEE_C37_118_2011;
import org.mpei.C37_118_2011_ALL_FRAME.frame.lowFrame.Frame_Data_IEEE_C37_118_2011;
import org.mpei.C37_118_2011_ALL_FRAME.frame.lowFrame.Frame_Header_IEEE_C37_118_2011;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Date;

@Setter
@Getter
/**---------------------------------------------------------------------------------------------------------------------
 * Класс, содержащий поля, отображающие структуру кадра Data протокола C37.118-2011------------------------------------
 * -------------------------------------------------------------------------------------------------------------------*/
public class General_Frame_IEEE_C37_118_2011 {
    private static final Logger log = LoggerFactory.getLogger(General_Frame_IEEE_C37_118_2011.class);
    /**---------------------------------------------------------------------------------------------------------------*/
    /**
     * Synchronization word - байты синхронизации. Состоит из байта синхронизации и байта, определяющего типа-----------
     * -----------------------------------------------------------------------------------------------------------------
     * Бит 7: зарезервирован, должен быть 0;
     * Биты 6-4:
     * - 000: кадр данных;
     * - 001: кадр заголовка;
     * - 010: кадр конфигурации (CFG-1);
     * - 011: кадр конфигурации (CFG-2);
     * - 101: кадр конфигурации (CFG-3);
     * - 100: кадр команды;
     * Биты 3-0:
     * - 0001: Версия кадров IEEE Std C37.118-2005;
     * - 0010: Версия кадров IEEE Std C37.118.2-2011;
     */
    private String synchronizationWord;                                                                //Размер: 2 байта

    /**
     * Идентификатор типа пакета
     */
    private int recTypePacket;                                                                                  //3 бита

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Framesize - количество байт в кадре, включая CHK-----------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private short frameSize;                                                                           //Размер: 2 байта

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * PMU/DC ID number (IDCode) - это идентификационный номер потока данных. Для кадра конфигурации, определяет--------
     * исходный поток данных--------------------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private short pmuDcIdNumber;                                                                       //Размер: 2 байта

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * SOC (Second 0f century) - содержит целое число секунд от начала эпохи UNIX---------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private Date SOC;                                                                                  //Размер: 4 байта

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Time quality flag - флаг качества времени------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private int timeQualityFlag;                                                                       //Размер: 1 байта

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Fraction of second (Fracsec) - доли секунды----------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private int fractionOfSecond;                                                                      //Размер: 3 байта

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Массив, который будет содержать объекты-классы, которые описывают кадр "команда"---------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private ArrayList<Frame_Command_IEEE_C37_118_2011> frameCommandC37 = new ArrayList<>() {
    };

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Массив, который будет содержать объекты-классы, которые описывают кадр "конфигурация"----------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private ArrayList<Frame_Configuration_IEEE_C37_118_2011> frameConfigurationC37 = new ArrayList<>() {
    };

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Массив, который будет содержать объекты-классы, которые описывают кадр "данные"----------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private ArrayList<Frame_Data_IEEE_C37_118_2011> frameDataC37 = new ArrayList<>() {
    };

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Массив, который будет содержать объекты-классы, которые описывают кадр "заголовок"-------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private ArrayList<Frame_Header_IEEE_C37_118_2011> frameHeaderC37 = new ArrayList<>() {
    };

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Check sum - контрольная сумма для проверки целостности пакета----------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private String checkSum;                                                                           //Размер: 2 байта

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Дополнительное поле, для определения количества блоков данных в одном пакете информации--------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    private int counterDataFrame;

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Конструктор:-----------------------------------------------------------------------------------------------------
     * - Заполняет массив PMU-классами;---------------------------------------------------------------------------------
     * - Задает начальные значения для полей строкового типа;-----------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public General_Frame_IEEE_C37_118_2011() {
        this.synchronizationWord = "0";
        this.checkSum = "0";
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод для вывода всех полей в человекочитаемом виде--------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    @Override
    public String toString() {
        return "\n\tFrame [IEEE C37.118-2011] {" + '\n' +
                "\t\tSynchronization word: 0x" + Integer.toHexString(Integer.parseInt(synchronizationWord)) + '\n' +
                "\t\tFrame size: " + frameSize + " (byte)" + '\n' +
                "\t\tPMU/DC ID number: " + pmuDcIdNumber + '\n' +
                "\t\tSOC time stamp: " + SOC + '\n' +
                "\t\tTime quality flag: " + timeQualityFlag + '\n' +
                "\t\tFraction of second: " + fractionOfSecond + '\n' + '\n' +
                toStringStructure() +
                "\t\tCheck sum: 0x" + Integer.toHexString(Integer.parseInt(checkSum)) + '\n' +
                "\t" + '}';
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Дополнительный метод, для корректного вывода вложенной структуры в зависимости от типа пакета--------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public String toStringStructure() {
        StringBuilder sructure = new StringBuilder();
        if (this.recTypePacket == 0) {
            for (int j = 0; j < this.counterDataFrame; j++) { //4
                sructure.append("\t\tBlock - " + (j + 1))
                        .append(" [IEEE C37.118-2011]")
                        .append("\n");
                for (int i = 0; i < this.frameDataC37.size(); i++) {
                    sructure.append("\t\t")
                            .append(i + 1)
                            .append(" ")
                            .append(this.frameDataC37.get(i).toString());
                }
            }

        } else if (this.recTypePacket == 1) {
            sructure.append(this.frameHeaderC37.get(0).toString())
                    .append("\n");

        } else if (this.recTypePacket == 2) {
            sructure.append(this.frameConfigurationC37.get(0).toString())
                    .append("\n");

        } else if (this.recTypePacket == 3) {
            sructure.append(this.frameConfigurationC37.get(0).toString())
                    .append("\n");

        } else if (this.recTypePacket == 4) {
            sructure.append(this.frameCommandC37.get(0).toString())
                    .append("\n");

        } else if (this.recTypePacket == 5) {
            sructure.append(this.frameConfigurationC37.get(0).toString())
                    .append("\n");

        } else {
            log.error("Unknown recTypePacket: " + recTypePacket);
        }
        return sructure.toString();
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод, для создания объектов нужного кадра, в зависимости от типа кадра------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public void typePacket() {
        if (this.recTypePacket == 0) {
            System.out.println("Frame type: Data (данные) - " + recTypePacket);
            for (int i = 0; i < this.counterDataFrame; i++) { //4
                this.frameDataC37.add(new Frame_Data_IEEE_C37_118_2011());
            }

        } else if (this.recTypePacket == 1) {
            System.out.println("Frame type: Header (заголовок) - " + recTypePacket);
            this.frameHeaderC37.add(new Frame_Header_IEEE_C37_118_2011());

        } else if (this.recTypePacket == 2) {
            System.out.println("Frame type: CFG-1 (конфигурация) - " + recTypePacket);
            for (int i = 0; i < 4; i++) {
                this.frameConfigurationC37.add(new Frame_Configuration_IEEE_C37_118_2011());
            }

        } else if (this.recTypePacket == 3) {
            System.out.println("Frame type: CFG-2 (конфигурация) - " + recTypePacket);
            for (int i = 0; i < 4; i++) {
                this.frameConfigurationC37.add(new Frame_Configuration_IEEE_C37_118_2011());
            }

        } else if (this.recTypePacket == 4) {
            System.out.println("Frame type: Command (команда) - " + recTypePacket);
            this.frameCommandC37.add(new Frame_Command_IEEE_C37_118_2011());

        } else if (this.recTypePacket == 5) {
            System.out.println("Frame type: CFG-3 (конфигурация) - " + recTypePacket);
            for (int i = 0; i < 4; i++) {
                this.frameConfigurationC37.add(new Frame_Configuration_IEEE_C37_118_2011());
            }

        } else {
            System.out.println("Unknown type packet: " + recTypePacket);
        }
    }
}
