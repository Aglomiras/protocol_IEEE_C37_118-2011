package org.mpei.C37_118_2011_ALL_FRAME.parserFrame;

import lombok.extern.slf4j.Slf4j;
import org.mpei.C37_118_2011_ALL_FRAME.frame.grandFrame.Frame_Ethernet_TCP_IP_IEEE_C37_118_2011;
import org.pcap4j.core.PcapPacket;

import java.nio.ByteBuffer;
import java.time.Instant;
import java.util.Date;
import java.util.Optional;

@Slf4j
public class Parser_All_Frame_IEEE_C37_118_2011 {

    public Optional<Frame_Ethernet_TCP_IP_IEEE_C37_118_2011> parserData(PcapPacket pcapPacket) {
        try {
            /**---------------------------------------------------------------------------------------------------------
             * Принятие массива байт------------------------------------------------------------------------------------
             * ---------------------------------------------------------------------------------------------------------
             * */
            byte[] data = pcapPacket.getRawData();

            /**---------------------------------------------------------------------------------------------------------
             * Создаем экземпляр класса - кадра сообщения по C37.118-2011-----------------------------------------------
             * ---------------------------------------------------------------------------------------------------------
             * */
            Frame_Ethernet_TCP_IP_IEEE_C37_118_2011 frameC37 = new Frame_Ethernet_TCP_IP_IEEE_C37_118_2011();

            /**---------------------------------------------------------------------------------------------------------
             * Ethernet II----------------------------------------------------------------------------------------------
             * Присвоение экземпляру кадра, информации о:---------------------------------------------------------------
             * 1. MAC-адресе получателя;--------------------------------------------------------------------------------
             * 2. MAC-адресе источника;---------------------------------------------------------------------------------
             * 3. Типе протокола;---------------------------------------------------------------------------------------
             * ---------------------------------------------------------------------------------------------------------
             * */
            frameC37.setMacDestination(byteArrayToMacAddress(data, 0));
            frameC37.setMacSource(byteArrayToMacAddress(data, 6));
            frameC37.setType(byteArrayToShort(data, 12));

            /**---------------------------------------------------------------------------------------------------------
             * Internet Protocol----------------------------------------------------------------------------------------
             * Присвоение экземпляру кадра следующей информации:--------------------------------------------------------
             * 1. Версия IP;--------------------------------------------------------------------------------------------
             * 2. Длина заголовка;--------------------------------------------------------------------------------------
             * 3. Тип обслуживания, может нести в себе приоритет для определенных приложений;---------------------------
             * 4. Общая длина пакета, заголовок + данные;---------------------------------------------------------------
             * 5. Идентификатор для фрагментации пакета (если пакет разбит на фрагменты, то у всех фрагментов будет один
             * идентификатор);------------------------------------------------------------------------------------------
             * 6. Указатель смещения пакета относительно начала оригинального пакета;-----------------------------------
             * 7. Указатель времени жизни пакета, показывает сколько шагов живет пакет;---------------------------------
             * 8. Указывает протокол на транспортном уровне: TCP - 6, UDP - 17;-----------------------------------------
             * 9. Контрольная сумма заголовка;--------------------------------------------------------------------------
             * 10.IP-адрес получателя;----------------------------------------------------------------------------------
             * 11.IP-адрес источника;-----------------------------------------------------------------------------------
             * ---------------------------------------------------------------------------------------------------------
             * */
            frameC37.setVersion(byteToIntVersion(data, 14));
            frameC37.setHeaderLength(byteToIntHeader(data, 14));
            frameC37.setDifferentiatedServicesField(byteToDiff(data, 15));
            frameC37.setLength(byteArrayToLength(data, 16));
            frameC37.setIdentification(byteArrayToString(data, 18));
            frameC37.setFragmentOffset(byteArrayToString(data, 20));
            frameC37.setTimeToLife(byteArrayToInt1(data, 22));
            frameC37.setProtocol(byteArrayToInt1(data, 23));
            frameC37.setHeaderCheckSum(byteArrayToString(data, 24));
            frameC37.setIpDestination(byteArrayToIpAddress(data, 26));
            frameC37.setIpSource(byteArrayToIpAddress(data, 30));

            /**---------------------------------------------------------------------------------------------------------
             * Transmission Control Protocol----------------------------------------------------------------------------
             * Присвоение экземпляру кадра следующей информации:--------------------------------------------------------
             * 1. Порт получателя;--------------------------------------------------------------------------------------
             * 2. Порт отправителя;-------------------------------------------------------------------------------------
             * 3. Порядковый номер первого байта в этом сегменте;-------------------------------------------------------
             * 4. Порядковый номер следующего байта, который получатель ожидает получить;-------------------------------
             * 5. Длина заголовка TCP;----------------------------------------------------------------------------------
             * 6. Флаг;-------------------------------------------------------------------------------------------------
             * 7. Размер окна;------------------------------------------------------------------------------------------
             * 8. Контрольная сумма;------------------------------------------------------------------------------------
             * 9. Указатель смещения начиная с порядкового номера;------------------------------------------------------
             * ---------------------------------------------------------------------------------------------------------
             * */
            frameC37.setPortDestination(byteArrayToShort(data, 34));
            frameC37.setPortSource(byteArrayToShort(data, 36));
            frameC37.setSeqNum(byteArrayToInt4(data, 38));
            frameC37.setAckNum(byteArrayToInt4(data, 42));
            frameC37.setHeaderLengthTCP(byteToIntVersion(data, 46));
            frameC37.setFlags(byteArrayToString(data, 46));
            frameC37.setWindow(byteArrayToShort(data, 48));
            frameC37.setCheckSum(byteArrayToString(data, 50));
            frameC37.setUrgentPointer(byteArrayToShort(data, 52));

            /**
             * ---------------------------------------------------------------------------------------------------------
             * General packet IEEE C37.118-2011-------------------------------------------------------------------------
             * ---------------------------------------------------------------------------------------------------------
             * */
            /**---------------------------------------------------------------------------------------------------------
             * Идентификатор типа пакета--------------------------------------------------------------------------------
             * ---------------------------------------------------------------------------------------------------------
             * */
            frameC37.getGeneral_frame_ieee_c37_118_2011()
                    .setSynchronizationWord(byteArrayToString(data, 54));

            /**---------------------------------------------------------------------------------------------------------
             * Идентификация типа пакета--------------------------------------------------------------------------------
             * ---------------------------------------------------------------------------------------------------------
             * */
            frameC37.getGeneral_frame_ieee_c37_118_2011()
                    .setRecTypePacket(recognitionTypePacket(data, 55));

            /**---------------------------------------------------------------------------------------------------------
             * Вызов метода, по созданию нужного объекта под тип кадра (ВЫЗЫВАТЬ СРАЗУ ПОСЛЕ ОПРЕДЕЛЕНИЯ ТИПА КАДРА)----
             * ---------------------------------------------------------------------------------------------------------
             * */
            frameC37.getGeneral_frame_ieee_c37_118_2011().typePacket();

            /**---------------------------------------------------------------------------------------------------------
             * Заполнение служебных полей protocol IEEE C37.118-2011----------------------------------------------------
             * ---------------------------------------------------------------------------------------------------------
             * */
            frameC37.getGeneral_frame_ieee_c37_118_2011()
                    .setFrameSize(byteArrayToShort(data, 56));
            frameC37.getGeneral_frame_ieee_c37_118_2011()
                    .setPmuDcIdNumber(byteArrayToShort(data, 58));
            frameC37.getGeneral_frame_ieee_c37_118_2011()
                    .setSOC(byteToSOC(data, 60));
            frameC37.getGeneral_frame_ieee_c37_118_2011()
                    .setTimeQualityFlag(byteArrayToInt1(data, 64));
            frameC37.getGeneral_frame_ieee_c37_118_2011()
                    .setFractionOfSecond(byteArrayToInt3(data, 65));

            /**---------------------------------------------------------------------------------------------------------
             * Вытаскиваем идентификатор типа пакета--------------------------------------------------------------------
             * В зависимости от типа пакета, различается его парсинг----------------------------------------------------
             * ---------------------------------------------------------------------------------------------------------
             * */
            int typeC37 = frameC37.getGeneral_frame_ieee_c37_118_2011().getRecTypePacket();

            System.out.println("---------------------------" + pcapPacket.length());

            /**---------------------------------------------------------------------------------------------------------
             * 0 - означает кадр данных (Data Frame)--------------------------------------------------------------------
             * ---------------------------------------------------------------------------------------------------------
             * */
            if (typeC37 == 0) {
                /**-----------------------------------------------------------------------------------------------------
                 * Количество блоков данных-----------------------------------------------------------------------------
                 * -----------------------------------------------------------------------------------------------------
                 * */
                int countDataFrame;

                /**-----------------------------------------------------------------------------------------------------
                 * Определение по размеру пакета, сколько блоков данных в него входит-----------------------------------
                 * -----------------------------------------------------------------------------------------------------
                 * */
                if (pcapPacket.length() < 1500) {
                    countDataFrame = 1;
                } else {
                    countDataFrame = 3;
                }

                /**-----------------------------------------------------------------------------------------------------
                 * Записываем информацию о количестве блоков данных в дополнительное поле класса, для корректного-------
                 * отображения всех блоков и их PMU---------------------------------------------------------------------
                 * -----------------------------------------------------------------------------------------------------
                 * */
                frameC37.getGeneral_frame_ieee_c37_118_2011().setCounterDataFrame(countDataFrame);

                /**-----------------------------------------------------------------------------------------------------
                 * Поочередный парсинг всех блоков данных Data Frame----------------------------------------------------
                 * -----------------------------------------------------------------------------------------------------
                 * */
                for (int i = 0; i < countDataFrame; i++) {

                    /**-------------------------------------------------------------------------------------------------
                     * PMU1---------------------------------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    /**-------------------------------------------------------------------------------------------------
                     * Запись значения флага----------------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameDataC37().get(0)
                            .setFlag(byteArrayToString(data, 68 + i * 456));

                    /**-------------------------------------------------------------------------------------------------
                     * Запись амплитуды и угла фазы А-------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011()
                            .getFrameDataC37().get(0)
                            .getMeasurements().get(0)
                            .setAmplitude(byteToFloutAmpl(data, 70 + i * 456));
                    frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameDataC37()
                            .get(0)
                            .getMeasurements().get(0)
                            .setAngle(byteToFloutAngle(data, 74 + i * 456));

                    /**-------------------------------------------------------------------------------------------------
                     * Запись амплитуды и угла фазы В-------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011()
                            .getFrameDataC37().get(0)
                            .getMeasurements().get(1)
                            .setAmplitude(byteToFloutAmpl(data, 78 + i * 456));
                    frameC37.getGeneral_frame_ieee_c37_118_2011()
                            .getFrameDataC37().get(0)
                            .getMeasurements().get(1)
                            .setAngle(byteToFloutAngle(data, 82 + i * 456));

                    /**-------------------------------------------------------------------------------------------------
                     * Запись амплитуды и угла фазы С-------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011()
                            .getFrameDataC37().get(0)
                            .getMeasurements().get(2)
                            .setAmplitude(byteToFloutAmpl(data, 86 + i * 456));
                    frameC37.getGeneral_frame_ieee_c37_118_2011()
                            .getFrameDataC37().get(0)
                            .getMeasurements().get(2)
                            .setAngle(byteToFloutAngle(data, 90 + i * 456));

                    /**-------------------------------------------------------------------------------------------------
                     * Запись сдвига по частоте-------------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011()
                            .getFrameDataC37().get(0)
                            .setFrequencyDeviation(byteArrayToShort(data, 94 + i * 456));

                    /**-------------------------------------------------------------------------------------------------
                     * Запись скорости изменения частоты----------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011()
                            .getFrameDataC37().get(0)
                            .setRate(byteArrayToShort(data, 96 + i * 456));

                    /**-------------------------------------------------------------------------------------------------
                     * Запись служебной информации----------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011()
                            .getFrameDataC37().get(0)
                            .setDigital(byteArrayToString(data, 98 + i * 456));


                    /**-------------------------------------------------------------------------------------------------
                     * PMU2---------------------------------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    /**-------------------------------------------------------------------------------------------------
                     * Запись значения флага----------------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011()
                            .getFrameDataC37().get(1)
                            .setFlag(byteArrayToString(data, 100 + i * 456));

                    /**-------------------------------------------------------------------------------------------------
                     * Запись амплитуд и углов каждого фазора-----------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    for (int j = 0; j < 14; j++) {
                        frameC37.getGeneral_frame_ieee_c37_118_2011()
                                .getFrameDataC37().get(1)
                                .getMeasurements().get(j)
                                .setAmplitude(byteToFloutAmpl(data, 102 + j * 8 + i * 456));
                        frameC37.getGeneral_frame_ieee_c37_118_2011()
                                .getFrameDataC37().get(1)
                                .getMeasurements().get(j)
                                .setAngle(byteToFloutAngle(data, 106 + j * 8 + i * 456));
                    }

                    /**-------------------------------------------------------------------------------------------------
                     * Запись сдвига по частоте-------------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011()
                            .getFrameDataC37().get(1)
                            .setFrequencyDeviation(byteArrayToShort(data, 214 + i * 456));

                    /**-------------------------------------------------------------------------------------------------
                     * Запись скорости изменения частоты----------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011()
                            .getFrameDataC37().get(1)
                            .setRate(byteArrayToShort(data, 216 + i * 456));

                    /**-------------------------------------------------------------------------------------------------
                     * Запись значений аналоговых каналов---------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    for (int j = 0; j < 8; j++) {
                        frameC37.getGeneral_frame_ieee_c37_118_2011()
                                .getFrameDataC37().get(1)
                                .getAnalogs().get(j)
                                .setValue(byteToFloutAmpl(data, 218 + j * 4 + i * 456));
                    }

                    /**-------------------------------------------------------------------------------------------------
                     * Запись служебной информации----------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011()
                            .getFrameDataC37().get(1)
                            .setDigital(byteArrayToString(data, 250 + i * 456));


                    /**-------------------------------------------------------------------------------------------------
                     * PMU3---------------------------------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameDataC37().get(2)
                            .setFlag(byteArrayToString(data, 252 + i * 456));

                    /**-------------------------------------------------------------------------------------------------
                     * Запись амплитуд и углов каждого фазора-----------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    for (int j = 0; j < 14; j++) {
                        frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameDataC37().get(2)
                                .getMeasurements().get(j)
                                .setAmplitude(byteToFloutAmpl(data, 254 + j * 8 + i * 456));
                        frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameDataC37().get(2)
                                .getMeasurements().get(j)
                                .setAngle(byteToFloutAngle(data, 258 + j * 8 + i * 456));
                    }

                    /**-------------------------------------------------------------------------------------------------
                     * Запись сдвига по частоте-------------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameDataC37().get(2)
                            .setFrequencyDeviation(byteArrayToShort(data, 366 + i * 456));

                    /**-------------------------------------------------------------------------------------------------
                     * Запись скорости изменения частоты----------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameDataC37().get(2)
                            .setRate(byteArrayToShort(data, 368 + i * 456));

                    /**-------------------------------------------------------------------------------------------------
                     * Запись значений аналоговых каналов---------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    for (int j = 0; j < 4; j++) {
                        frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameDataC37().get(2)
                                .getAnalogs().get(j)
                                .setValue(byteToFloutAmpl(data, 370 + j * 4 + i * 456));
                    }

                    /**-------------------------------------------------------------------------------------------------
                     * Запись служебной информации----------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameDataC37().get(2)
                            .setDigital(byteArrayToString(data, 386 + i * 456));


                    /**-------------------------------------------------------------------------------------------------
                     * PMU4---------------------------------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameDataC37().get(3)
                            .setFlag(byteArrayToString(data, 388 + i * 456));

                    /**-------------------------------------------------------------------------------------------------
                     * Запись амплитуд и углов каждого фазора-----------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    for (int j = 0; j < 14; j++) {
                        frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameDataC37().get(3)
                                .getMeasurements().get(j)
                                .setAmplitude(byteToFloutAmpl(data, 390 + j * 8 + i * 456));
                        frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameDataC37().get(3)
                                .getMeasurements().get(j)
                                .setAngle(byteToFloutAngle(data, 394 + j * 8 + i * 456));
                    }

                    /**-------------------------------------------------------------------------------------------------
                     * Запись сдвига по частоте-------------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameDataC37().get(3)
                            .setFrequencyDeviation(byteArrayToShort(data, 502 + i * 456));

                    /**-------------------------------------------------------------------------------------------------
                     * Запись скорости изменения частоты----------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameDataC37().get(3)
                            .setRate(byteArrayToShort(data, 504 + i * 456));

                    /**-------------------------------------------------------------------------------------------------
                     * Запись служебной информации----------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameDataC37().get(3)
                            .setDigital(byteArrayToString(data, 506 + i * 456));

                    /**-------------------------------------------------------------------------------------------------
                     * Запись контрольной суммы-------------------------------------------------------------------------
                     * -------------------------------------------------------------------------------------------------
                     * */
                    frameC37.getGeneral_frame_ieee_c37_118_2011()
                            .setCheckSum(byteArrayToString(data, 508 + i * 456));
                }

                /**-----------------------------------------------------------------------------------------------------
                 * 1 - означает кадр заголовка (Header Frame)-----------------------------------------------------------
                 * -----------------------------------------------------------------------------------------------------
                 * */
            } else if (typeC37 == 1) {
                frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameHeaderC37();

                /**-----------------------------------------------------------------------------------------------------
                 * 2 - означает кадр конфигурации CFG-1 (Configuration Frame)-------------------------------------------
                 * -----------------------------------------------------------------------------------------------------
                 * */
            } else if (typeC37 == 2) {
                /**
                 * CFG-1
                 * */
                /**-----------------------------------------------------------------------------------------------------
                 * Заполнение служебных полей пакета конфигурационного тиа----------------------------------------------
                 * -----------------------------------------------------------------------------------------------------
                 * */
                frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameConfigurationC37().get(0).setConfig(String.valueOf(byteArrayToInt1(data, 68)));
                frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameConfigurationC37().get(0).setResolution(Integer.toBinaryString(byteArrayToInt3(data, 69)));

                short numberPmu = byteArrayToShort(data, 72);
                System.out.println("numberPmu " + numberPmu + " " + data[72] + " " + data[73] + " " + data[74] + " " + data[75]);
                frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameConfigurationC37().get(0).setNumberPMU(numberPmu);
                frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameConfigurationC37().get(0).completionDataConfiguration();

                frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameConfigurationC37().get(0).getDataPmu().get(0).setPmuDcIdNum(byteArrayToShort(data, 74));
                short numPhasors = byteArrayToShort(data, 76);
                System.out.println("numPhasors " + numPhasors);
                frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameConfigurationC37().get(0).getDataPmu().get(0).setNumPhasor((short) numPhasors);

                short numAnalogs = byteArrayToShort(data, 78);
                System.out.println("numAnalogs " + numAnalogs);
                frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameConfigurationC37().get(0).getDataPmu().get(0).setNumAnalog((short) numAnalogs);

                short numDigitals = byteArrayToShort(data, 80);
                System.out.println("numDigitals " + numDigitals);
                frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameConfigurationC37().get(0).getDataPmu().get(0).setNumDigital((short) numDigitals);
                frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameConfigurationC37().get(0).getDataPmu().get(0).allAddMeasur(); //Создание заданного количества каналов

                /**Запись фазоров*/
//                for (int j = 0; j < numPhasors; j++) {
//                    double ampl = byteToDoubleAmpl(data, 82 + j * 16);
//                    frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameConfigurationC37().get(0).getDataPmu().get(0).getPhasors().get(j).setAmplitude(ampl);
//                    double angle = byteToDoubleAngle(data, 90 + j * 16);
//                    frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameConfigurationC37().get(0).getDataPmu().get(0).getPhasors().get(j).setAngle(angle);
//                }

                /**Запись аналоговых каналов*/
//                for (int j = 0; j < numAnalogs; j++) {
//                    float ampl = byteToFloutAmpl(data, 82 + numPhasors * 16 + j * 16);
//                    frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameConfigurationC37().get(0).getDataPmu().get(0).getAnalogs().get(j).setAmplitude(ampl);
//                    float angle = byteToFloutAngle(data, 90 + numPhasors * 16 + j * 16);
//                    frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameConfigurationC37().get(0).getDataPmu().get(0).getAnalogs().get(j).setAngle(angle);
//                }

                /**Запись цифровых каналов*/
//                for (int j = 0; j < numDigitals; j++) {
//
//                }


                /**-----------------------------------------------------------------------------------------------------
                 * 3 - означает кадр конфигурации CFG-2 (Configuration Frame)-------------------------------------------
                 * -----------------------------------------------------------------------------------------------------
                 * */
            } else if (typeC37 == 3) {
                /**
                 * CFG-2
                 * */
//                frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameConfigurationC37();


                /**-----------------------------------------------------------------------------------------------------
                 * 4 - означает кадр команды (Command Frame)------------------------------------------------------------
                 * -----------------------------------------------------------------------------------------------------
                 * */
            } else if (typeC37 == 4) {
                frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameCommandC37().get(0).setCommand(byteArrayToShort(data, 68));
                frameC37.getGeneral_frame_ieee_c37_118_2011().setCheckSum(byteArrayToString(data, 70));


                /**-----------------------------------------------------------------------------------------------------
                 * 5 - означает кадр конфигурации CFG-3 (Configuration Frame)-------------------------------------------
                 * -----------------------------------------------------------------------------------------------------
                 * */
            } else if (typeC37 == 5) {
                /**
                 * CFG-3
                 * */
//                frameC37.getGeneral_frame_ieee_c37_118_2011().getFrameConfigurationC37();

            } else {

            }
            return Optional.of(frameC37);
        } catch (Exception exception) {
            exception.printStackTrace();
            log.error("Cannot parse C37.118-2011 packet");
        }
        return Optional.empty();
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по переводу 6 байт данных в MAC-адрес назначения (формат String)-------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public static String byteArrayToMacAddress(byte[] data, int offset) {
        return String.format("%02X:%02X:%02X:%02X:%02X:%02X", data[offset], data[1 + offset], data[2 + offset], data[3 + offset], data[4 + offset], data[5 + offset]);
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по переводу 4 байт данных в IP-адрес назначения (формат String)--------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public static String byteArrayToIpAddress(byte[] data, int offset) {
        return String.format("%d.%d.%d.%d.", data[offset] & 0xFF, data[1 + offset] & 0xFF, data[2 + offset] & 0xFF, data[3 + offset] & 0xFF);
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по переводу 2 байт данных в формат short-------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public static short byteArrayToShort(byte[] data, int offset) {
        return (short) (data[offset + 1] & 0xFF | (data[offset] & 0xFF) << 8);
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по переводу 1 байта данных в формат int--------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public static int byteArrayToInt1(byte[] data, int offset) {
        return data[offset] & 0xFF;
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по переводу 3 байта данных в формат int--------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public static int byteArrayToInt3(byte[] data, int offset) {
        return data[offset + 2] & 0xFF | (data[offset + 1] & 0xFF) << 8 | (data[offset] & 0xFF) << 16;
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по переводу 4 байта данных в формат int--------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public static int byteArrayToInt4(byte[] data, int offset) {
        return data[offset + 3] & 0xFF | (data[offset + 2] & 0xFF) << 8 | (data[offset + 1] & 0xFF) << 16 | (data[offset] & 0xFF) << 24;
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по переводу 1 байта в формат int, обозначающий версию IP и состоящий из 4 бит данных-----------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public static int byteToIntVersion(byte[] data, int offset) {
        return (data[offset] >> 4 & 0xFF);
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по определению длины заголовка, состоящего из 4 бит данных-------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public static int byteToIntHeader(byte[] data, int offset) {
        return ((data[offset] & 0b00001111) & 0xFF);
    }

    /***/
    public static String byteToDiff(byte[] data, int offset) {
        return String.format("0x%02x", data[offset]);
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по определению длины пакета--------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public static int byteArrayToLength(byte[] data, int offset) {
        return (data[offset + 1] & 0xFF | (data[offset] & 0xFF) << 8);
    }

    /***/
    public static String byteArrayToString(byte[] data, int offset) {
        return String.valueOf(((data[offset] & 0xFF) << 8) | (data[1 + offset] & 0xFF));
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по определению амплитуды (из 4 байт)-----------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public static float byteToFloutAmpl(byte[] data, int offset) {
        return Float.intBitsToFloat(byteArrayToInt4(data, offset));
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по определению угла (из 4 байт) в градусах-----------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public static float byteToFloutAngle(byte[] data, int offset) {
        return (float) (Float.intBitsToFloat(byteArrayToInt4(data, offset)) * 180 / Math.PI);
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по определению амплитуды (из 8 байт)-----------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public static double byteToDoubleAmpl(byte[] data, int offset) {
        byte[] byteArray = new byte[8];
        for (int i = 0; i < 8; i++) {
            byteArray[i] = data[offset + i];
        }
        return ByteBuffer.wrap(byteArray).getDouble();
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по определению угла (из 8 байт) в градусах-----------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public static double byteToDoubleAngle(byte[] data, int offset) {
        byte[] byteArray = new byte[8];
        for (int i = 0; i < 8; i++) {
            byteArray[i] = data[offset + i];
        }
        return ByteBuffer.wrap(byteArray).getDouble() * 180 / Math.PI;
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по определению служебной информации (даты и времени)-------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public static Date byteToSOC(byte[] data, int offset) {
        return Date.from(Instant.ofEpochSecond(byteArrayToInt4(data, offset)));
    }

    /**
     * -----------------------------------------------------------------------------------------------------------------
     * Метод по определению идентификатора типа пакета------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------------------
     */
    public static int recognitionTypePacket(byte[] data, int offset) {
        return (data[offset] >> 4) & 0xFF;
    }
}
